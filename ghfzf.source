#!/usr/bin/env bash

# [ghpr] search for open pull requests created by user, usage: ghpr [FLAGS] [AUTHOR] - if AUTHOR is empty, @me is used
function ghpr {
	# default flag values
	local state_value="open"
	local owner_value=""

	while [ "$1" != "" ]; do
		case $1 in
		--state)
			shift
			state_value=$1
			;;
		--owner)
			shift
			owner_value=$1
			;;
		*)
			break
			;;
		esac
		shift
	done

	# arguments
	local author="${1:-@me}"
	# execute
	local output=$(gh search prs \
		--archived=false \
		--author="${author}" \
		--json="repository,number,author,title,state,updatedAt" \
		--limit 100 \
		--owner="${owner_value}" \
		--state="${state_value}" \
		--template='{{range .}}{{tablerow .repository.nameWithOwner (printf "%v" .number | autocolor "green") .author.login .title .state (timeago .updatedAt)}}{{end}}')

	if [[ -n "$output" ]]; then
		local selected=$(echo $output | fzf -d ' ' \
			--multi \
			--ansi \
			--expect="enter" \
			--header=$'Enter: Open in Browser' \
			--prompt="Search Pull Requests By (${author}): ")

		local key="$(head -1 <<<"$selected")"
		case "$key" in
		enter)
			sed 1d <<<"$selected" | awk '{print $1,$2}' | xargs -I{} sh -c 'gh browse --repo {}'
			;;
		esac
	else
		echo "nothing found!"
	fi
}

# [ghpra] search for open pull requests assigned to user, usage: ghpra [ASSIGNEE] - if ASSIGNEE is empty, @me is used
function ghpra {
	# default flag values
	local state_value="open"
	local owner_value=""

	while [ "$1" != "" ]; do
		case $1 in
		--state)
			shift
			state_value=$1
			;;
		--owner)
			shift
			owner_value=$1
			;;
		*)
			break
			;;
		esac
		shift
	done

	# arguments
	local assignee="${1:-@me}"

	local output=$(gh search prs \
		--archived=false \
		--assignee="${assignee}" \
		--json="repository,number,author,title,updatedAt" \
		--limit 100 \
		--owner="${owner_value}" \
		--state="${state_value}" \
		--template='{{range .}}{{tablerow .repository.nameWithOwner (printf "%v" .number | autocolor "green") .author.login .title (timeago .updatedAt)}}{{end}}')

	if [[ -n "$output" ]]; then
		local selected=$(echo $output | fzf -d ' ' \
			--multi \
			--ansi \
			--expect="enter" \
			--header=$'Enter: Open in Browser' \
			--prompt="Search Pull Requests Assigned To (${assignee}): ")

		local key="$(head -1 <<<"$selected")"
		case "$key" in
		enter)
			sed 1d <<<"$selected" | awk '{print $1,$2}' | xargs -I{} sh -c 'gh browse --repo {}'
			;;
		esac
	else
		echo "nothing found!"
	fi
}

# [ghprm] search for open pull requests with user mentions, usage: ghprm [USER] - if USER is empty, @me is used
function ghprm {

	# default flag values
	local state_value="open"
	local owner_value=""

	while [ "$1" != "" ]; do
		case $1 in
		--state)
			shift
			state_value=$1
			;;
		--owner)
			shift
			owner_value=$1
			;;
		*)
			break
			;;
		esac
		shift
	done

	local user="${1:-@me}"
	local output=$(gh search prs \
		--archived=false \
		--json="repository,number,author,title,state,updatedAt" \
		--limit 100 \
		--mentions="${user}" \
		--owner="${owner_value}" \
		--state="${state_value}" \
		--template='{{range .}}{{tablerow .repository.nameWithOwner (printf "%v" .number | autocolor "green") .author.login .title .state (timeago .updatedAt)}}{{end}}')

	if [[ -n "$output" ]]; then
		local selected=$(echo $output | fzf -d ' ' \
			--multi \
			--ansi \
			--expect="enter" \
			--header=$'Enter: Open in Browser' \
			--prompt="Search Pull Requests With Mentions (${user}): ")

		local key="$(head -1 <<<"$selected")"
		case "$key" in
		enter)
			sed 1d <<<"$selected" | awk '{print $1,$2}' | xargs -I{} sh -c 'gh browse --repo {}'
			;;
		esac
	else
		echo "nothing found!"
	fi
}

# [ghi] search for open issues created by user, usage: ghi [AUTHOR] - if AUTHOR is empty, @me is used
function ghi {

	# default flag values
	local state_value="open"
	local owner_value=""

	while [ "$1" != "" ]; do
		case $1 in
		--state)
			shift
			state_value=$1
			;;
		--owner)
			shift
			owner_value=$1
			;;
		*)
			break
			;;
		esac
		shift
	done

	local author="${1:-@me}"
	local output=$(gh search issues \
		--archived=false \
		--author="${author}" \
		--json="repository,number,author,title,state,updatedAt" \
		--limit 100 \
		--owner="${owner_value}" \
		--state="${state_value}" \
		--template='{{range .}}{{tablerow .repository.nameWithOwner (printf "%v" .number | autocolor "green") .author.login .title .state (timeago .updatedAt)}}{{end}}')

	if [[ -n "$output" ]]; then
		local selected=$(echo $output | fzf -d ' ' \
			--multi \
			--ansi \
			--expect="enter" \
			--header=$'Enter: Open in Browser' \
			--prompt="Search Issues Created By (${author}): ")

		local key="$(head -1 <<<"$selected")"
		case "$key" in
		enter)
			sed 1d <<<"$selected" | awk '{print $1,$2}' | xargs -I{} sh -c 'gh browse --repo {}'
			;;
		esac
	else
		echo "nothing found!"
	fi
}

# [ghia] search for open issues assigned to user, usage: ghia [ASSIGNEE] - if ASSIGNEE is empty, @me is used
function ghia {

	# default flag values
	local state_value="open"
	local owner_value=""

	while [ "$1" != "" ]; do
		case $1 in
		--state)
			shift
			state_value=$1
			;;
		--owner)
			shift
			owner_value=$1
			;;
		*)
			break
			;;
		esac
		shift
	done
	local assignee="${1:-@me}"
	local output=$(gh search issues \
		--archived=false \
		--assignee="${assignee}" \
		--json="repository,number,author,title,state,updatedAt" \
		--limit 100 \
		--owner="${owner_value}" \
		--state="${state_value}" \
		--template='{{range .}}{{tablerow .repository.nameWithOwner (printf "%v" .number | autocolor "green") .author.login .title .state (timeago .updatedAt)}}{{end}}')

	if [[ -n "$output" ]]; then
		local selected=$(echo $output | fzf -d ' ' \
			--multi \
			--ansi \
			--expect="enter" \
			--header=$'Enter: Open in Browser' \
			--prompt="Search Issues Assigned To (${assignee}): ")

		local key="$(head -1 <<<"$selected")"
		case "$key" in
		enter)
			sed 1d <<<"$selected" | awk '{print $1,$2}' | xargs -I{} sh -c 'gh browse --repo {}'
			;;
		esac
	else
		echo "nothing found!"
	fi
}

# [ghim] search for open issues with user mentions, usage: ghim [USER] - if USER is empty, @me is used
function ghim {

	# default flag values
	local state_value="open"
	local owner_value=""

	while [ "$1" != "" ]; do
		case $1 in
		--state)
			shift
			state_value=$1
			;;
		--owner)
			shift
			owner_value=$1
			;;
		*)
			break
			;;
		esac
		shift
	done

	local user="${1:-@me}"
	local output=$(gh search issues \
		--archived=false \
		--json="repository,number,author,title,state,updatedAt" \
		--limit 100 \
		--mentions="${user}" \
		--owner="${owner_value}" \
		--state="${state_value}" \
		--template='{{range .}}{{tablerow .repository.nameWithOwner (printf "%v" .number | autocolor "green") .author.login .title .state (timeago .updatedAt)}}{{end}}')

	if [[ -n "$output" ]]; then
		local selected=$(echo $output | fzf -d ' ' \
			--multi \
			--ansi \
			--expect="enter" \
			--header=$'Enter: Open in Browser' \
			--prompt="Search Issues With Mentions (${user}): ")

		local key="$(head -1 <<<"$selected")"
		case "$key" in
		enter)
			sed 1d <<<"$selected" | awk '{print $1,$2}' | xargs -I{} sh -c 'gh browse --repo {}'
			;;
		esac
	else
		echo "nothing found!"
	fi
}

# [ghrr] search for pull requests waiting for a review requested by user, usage: ghrr [AUTHOR] - if AUTHOR is empty, @me is used
function ghrr {

	# default flag values
	local state_value="open"
	local owner_value=""

	while [ "$1" != "" ]; do
		case $1 in
		--state)
			shift
			state_value=$1
			;;
		--owner)
			shift
			owner_value=$1
			;;
		*)
			break
			;;
		esac
		shift
	done

	local reviewer="${1:-@me}"
	local output=$(gh search prs \
		--archived=false \
		--json="repository,number,author,title,state,updatedAt" \
		--limit 100 \
		--owner="${owner_value}" \
		--review-requested="${reviewer}" \
		--state="${state_value}" \
		--template='{{range .}}{{tablerow .repository.nameWithOwner (printf "%v" .number | autocolor "green") .author.login .title .state (timeago .updatedAt)}}{{end}}')

	if [[ -n "$output" ]]; then
		local selected=$(echo $output | fzf -d ' ' \
			--multi \
			--ansi \
			--expect="enter" \
			--header=$'Enter: Open in Browser' \
			--prompt="Search Reviews Requests (${reviewer}): ")

		local key="$(head -1 <<<"$selected")"
		case "$key" in
		enter)
			sed 1d <<<"$selected" | awk '{print $1,$2}' | xargs -I{} sh -c 'gh browse --repo {}'
			;;
		esac
	else
		echo "nothing found!"
	fi
}

# [ghspr] search for pull requests waiting for a review across all repositories owned by an owner, usage: ghspr [OWNER] - if OWNER is empty, @me is used
function ghspr {
	local owner="${1:-@me}"
	local output=$(gh search prs \
		--archived=false \
		--json="repository,number,author,title,state,updatedAt" \
		--limit 100 \
		--owner="${owner}" \
		--state="open" \
		--template='{{range .}}{{tablerow .repository.nameWithOwner (printf "%v" .number | autocolor "green") .author.login .title .state (timeago .updatedAt)}}{{end}}')

	if [[ -n "$output" ]]; then
		local selected=$(echo $output | fzf -d ' ' \
			--multi \
			--ansi \
			--expect="enter" \
			--header=$'Enter: Open in Browser' \
			--prompt="Search Pull Requests owned by (${owner}): ")

		local key="$(head -1 <<<"$selected")"
		case "$key" in
		enter)
			sed 1d <<<"$selected" | awk '{print $1,$2}' | xargs -I{} sh -c 'gh browse --repo {}'
			;;
		esac
	else
		echo "nothing found!"
	fi
}

# [ghsi] search for open issues created across all repos owned by an owner, usage: ghsi [OWNER] - if OWNER is empty, @me is used
function ghsi {
	local owner="${1:-@me}"
	local output=$(gh search issues \
		--archived=false \
		--json="repository,number,author,title,state,updatedAt" \
		--json="repository,number,author,title,updatedAt" \
		--limit 100 \
		--owner="${owner}" \
		--template='{{range .}}{{tablerow .repository.nameWithOwner (printf "%v" .number | autocolor "green") .author.login .title .state (timeago .updatedAt)}}{{end}}')

	if [[ -n "$output" ]]; then
		local selected=$(echo $output | fzf -d ' ' \
			--multi \
			--ansi \
			--expect="enter" \
			--header=$'Enter: Open in Browser' \
			--prompt="Search Pull Requests owned by (${owner}): ")

		local key="$(head -1 <<<"$selected")"
		case "$key" in
		enter)
			sed 1d <<<"$selected" | awk '{print $1,$2}' | xargs -I{} sh -c 'gh browse --repo {}'
			;;
		esac
	else
		echo "nothing found!"
	fi
}

# [ghhelp] show this help message
function ghhelp() {
	echo "Usage of ghfzf aliases"
	echo
	echo "Collection of powerful aliases to speed up interactions with GitHub"
	echo "Find more information at https://github.com/cbrgm/ghfzf"
	echo
	echo "Usage:"
	if [ -n "$ZSH_VERSION" ]; then
		grep -E '^# \[.+\]' "${(%):-%x}"
	else
		grep -E '^# \[.+\]' "${BASH_SOURCE[0]}"
	fi
}
