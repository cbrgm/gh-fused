#!/usr/bin/env bash

# [ghpr] Search for open pull requests created by a specified user or the current user if no author is provided
# Flags:
#   --state  specifies the state of the pull request (open or closed). Default is open.
#   --owner  specifies the owner of the repository for the pull request.
# Usage: ghpr [FLAGS] [AUTHOR]
function ghpr {
	# default flag values
	local state_value="open"
	local owner_value=""

	while [ "$1" != "" ]; do
		case $1 in
		--state)
			shift
			state_value=$1
			;;
		--owner)
			shift
			owner_value=$1
			;;
		*)
			break
			;;
		esac
		shift
	done

	# arguments
	local author="${1:-@me}"
	# execute
	local output=$(gh search prs \
		--archived=false \
		--author="${author}" \
		--json="repository,number,author,title,state,updatedAt" \
		--limit 100 \
		--owner="${owner_value}" \
		--state="${state_value}" \
		--template='{{range .}}{{tablerow .repository.nameWithOwner .number .author.login .title .state (timeago .updatedAt)}}{{end}}')

	if [[ -n "$output" ]]; then
		local selected=$(echo $output | fzf -d ' ' \
			--multi \
			--ansi \
			--expect="enter" \
			--header=$'Enter: Open in Browser' \
			--prompt="Search Pull Requests By (${author}): ")

		local key="$(head -1 <<<"$selected")"
		case "$key" in
		enter)
			sed 1d <<<"$selected" | awk '{print $1,$2}' | xargs -I{} sh -c 'gh browse --repo {}'
			;;
		esac
	else
		echo "nothing found!"
	fi
}

# [ghpra] Search for open pull requests assigned to a specified user or the current user if no assignee is provided
# Flags:
#   --state  specifies the state of the pull request (open or closed). Default is open.
#   --owner  specifies the owner of the repository for the pull request.
# Usage: ghpra [FLAGS] [ASSIGNEE]
function ghpra {
	# default flag values
	local state_value="open"
	local owner_value=""

	while [ "$1" != "" ]; do
		case $1 in
		--state)
			shift
			state_value=$1
			;;
		--owner)
			shift
			owner_value=$1
			;;
		*)
			break
			;;
		esac
		shift
	done

	# arguments
	local assignee="${1:-@me}"

	local output=$(gh search prs \
		--archived=false \
		--assignee="${assignee}" \
		--json="repository,number,author,title,state,updatedAt" \
		--limit 100 \
		--owner="${owner_value}" \
		--state="${state_value}" \
		--template='{{range .}}{{tablerow .repository.nameWithOwner .number .author.login .title .state (timeago .updatedAt)}}{{end}}')

	if [[ -n "$output" ]]; then
		local selected=$(echo $output | fzf -d ' ' \
			--multi \
			--ansi \
			--expect="enter" \
			--header=$'Enter: Open in Browser' \
			--prompt="Search Pull Requests Assigned To (${assignee}): ")

		local key="$(head -1 <<<"$selected")"
		case "$key" in
		enter)
			sed 1d <<<"$selected" | awk '{print $1,$2}' | xargs -I{} sh -c 'gh browse --repo {}'
			;;
		esac
	else
		echo "nothing found!"
	fi
}

# [ghprm] Search for open pull requests with mentions of a specified user or the current user if no user is provided
# Flags:
#   --state  specifies the state of the pull request (open or closed). Default is open.
#   --owner  specifies the owner of the repository for the pull request.
# Usage: ghprm [FLAGS] [USER]
function ghprm {

	# default flag values
	local state_value="open"
	local owner_value=""

	while [ "$1" != "" ]; do
		case $1 in
		--state)
			shift
			state_value=$1
			;;
		--owner)
			shift
			owner_value=$1
			;;
		*)
			break
			;;
		esac
		shift
	done

	local user="${1:-@me}"
	local output=$(gh search prs \
		--archived=false \
		--json="repository,number,author,title,state,updatedAt" \
		--limit 100 \
		--mentions="${user}" \
		--owner="${owner_value}" \
		--state="${state_value}" \
		--template='{{range .}}{{tablerow .repository.nameWithOwner .number .author.login .title .state (timeago .updatedAt)}}{{end}}')

	if [[ -n "$output" ]]; then
		local selected=$(echo $output | fzf -d ' ' \
			--multi \
			--ansi \
			--expect="enter" \
			--header=$'Enter: Open in Browser' \
			--prompt="Search Pull Requests With Mentions (${user}): ")

		local key="$(head -1 <<<"$selected")"
		case "$key" in
		enter)
			sed 1d <<<"$selected" | awk '{print $1,$2}' | xargs -I{} sh -c 'gh browse --repo {}'
			;;
		esac
	else
		echo "nothing found!"
	fi
}

# [ghi] Search for open issues created by a specified user or the current user if no author is provided
# Flags:
#   --state  specifies the state of the issue (open or closed). Default is open.
#   --owner  specifies the owner of the repository for the issue.
# Usage: ghi [FLAGS] [AUTHOR]
function ghi {

	# default flag values
	local state_value="open"
	local owner_value=""

	while [ "$1" != "" ]; do
		case $1 in
		--state)
			shift
			state_value=$1
			;;
		--owner)
			shift
			owner_value=$1
			;;
		*)
			break
			;;
		esac
		shift
	done

	local author="${1:-@me}"
	local output=$(gh search issues \
		--archived=false \
		--author="${author}" \
		--json="repository,number,author,title,state,updatedAt" \
		--limit 100 \
		--owner="${owner_value}" \
		--state="${state_value}" \
		--template='{{range .}}{{tablerow .repository.nameWithOwner .number .author.login .title .state (timeago .updatedAt)}}{{end}}')

	if [[ -n "$output" ]]; then
		local selected=$(echo $output | fzf -d ' ' \
			--multi \
			--ansi \
			--expect="enter" \
			--header=$'Enter: Open in Browser' \
			--prompt="Search Issues Created By (${author}): ")

		local key="$(head -1 <<<"$selected")"
		case "$key" in
		enter)
			sed 1d <<<"$selected" | awk '{print $1,$2}' | xargs -I{} sh -c 'gh browse --repo {}'
			;;
		esac
	else
		echo "nothing found!"
	fi
}

# [ghia] Search for open issues assigned to a specified user or the current user if no assignee is provided
# Flags:
#   --state  specifies the state of the issue (open or closed). Default is open.
#   --owner  specifies the owner of the repository for the issue.
# Usage: ghia [FLAGS] [ASSIGNEE]
function ghia {

	# default flag values
	local state_value="open"
	local owner_value=""

	while [ "$1" != "" ]; do
		case $1 in
		--state)
			shift
			state_value=$1
			;;
		--owner)
			shift
			owner_value=$1
			;;
		*)
			break
			;;
		esac
		shift
	done
	local assignee="${1:-@me}"
	local output=$(gh search issues \
		--archived=false \
		--assignee="${assignee}" \
		--json="repository,number,author,title,state,updatedAt" \
		--limit 100 \
		--owner="${owner_value}" \
		--state="${state_value}" \
		--template='{{range .}}{{tablerow .repository.nameWithOwner .number .author.login .title .state (timeago .updatedAt)}}{{end}}')

	if [[ -n "$output" ]]; then
		local selected=$(echo $output | fzf -d ' ' \
			--multi \
			--ansi \
			--expect="enter" \
			--header=$'Enter: Open in Browser' \
			--prompt="Search Issues Assigned To (${assignee}): ")

		local key="$(head -1 <<<"$selected")"
		case "$key" in
		enter)
			sed 1d <<<"$selected" | awk '{print $1,$2}' | xargs -I{} sh -c 'gh browse --repo {}'
			;;
		esac
	else
		echo "nothing found!"
	fi
}

# [ghim] Search for open issues with mentions of a specified user or the current user if no user is provided
# Flags:
#   --state  specifies the state of the issue (open or closed). Default is open.
#   --owner  specifies the owner of the repository for the issue.
# Usage: ghiu [FLAGS] [USER]
function ghim {

	# default flag values
	local state_value="open"
	local owner_value=""

	while [ "$1" != "" ]; do
		case $1 in
		--state)
			shift
			state_value=$1
			;;
		--owner)
			shift
			owner_value=$1
			;;
		*)
			break
			;;
		esac
		shift
	done

	local user="${1:-@me}"
	local output=$(gh search issues \
		--archived=false \
		--json="repository,number,author,title,state,updatedAt" \
		--limit 100 \
		--mentions="${user}" \
		--owner="${owner_value}" \
		--state="${state_value}" \
		--template='{{range .}}{{tablerow .repository.nameWithOwner .number .author.login .title .state (timeago .updatedAt)}}{{end}}')

	if [[ -n "$output" ]]; then
		local selected=$(echo $output | fzf -d ' ' \
			--multi \
			--ansi \
			--expect="enter" \
			--header=$'Enter: Open in Browser' \
			--prompt="Search Issues With Mentions (${user}): ")

		local key="$(head -1 <<<"$selected")"
		case "$key" in
		enter)
			sed 1d <<<"$selected" | awk '{print $1,$2}' | xargs -I{} sh -c 'gh browse --repo {}'
			;;
		esac
	else
		echo "nothing found!"
	fi
}

# [ghrr] Search for open pull requests with review requests made by a specified user or the current user if no user is provided
# Flags:
#   --state  specifies the state of the pull request (open or closed). Default is open.
#   --owner  specifies the owner of the repository for the pull request.
# Usage: ghrr [FLAGS] [AUTHOR]
function ghrr {

	# default flag values
	local state_value="open"
	local owner_value=""

	while [ "$1" != "" ]; do
		case $1 in
		--state)
			shift
			state_value=$1
			;;
		--owner)
			shift
			owner_value=$1
			;;
		*)
			break
			;;
		esac
		shift
	done

	local reviewer="${1:-@me}"
	local output=$(gh search prs \
		--archived=false \
		--json="repository,number,author,title,state,updatedAt" \
		--limit 100 \
		--owner="${owner_value}" \
		--review-requested="${reviewer}" \
		--state="${state_value}" \
		--sort="updated" \
		--template='{{range .}}{{tablerow .repository.nameWithOwner .number .author.login .title .state (timeago .updatedAt)}}{{end}}')

	if [[ -n "$output" ]]; then
		local selected=$(echo $output | fzf -d ' ' \
			--exit-0 \
			--multi \
			--ansi \
			--expect="enter" \
			--header=$'Enter: Open in Browser' \
			--prompt="Search Reviews Requests (${reviewer}): ")

		local key="$(head -1 <<<"$selected")"
		case "$key" in
		enter)
			sed 1d <<<"$selected" | awk '{print $1,$2}' | xargs -I{} sh -c 'gh browse --repo {}'
			;;
		esac
	else
		echo "nothing found!"
	fi
}

# [ghspr] Search for pull requests waiting for review across all repositories owned by an owner
#
# Parameters:
# - OWNER: owner of the repositories to search in, defaults to "@me" if not provided
#
# Usage: ghspr [OWNER]
function ghspr {
	local owner="${1:-@me}"
	local output=$(gh search prs \
		--archived=false \
		--json="repository,number,author,title,state,updatedAt" \
		--limit 100 \
		--owner="${owner}" \
		--state="open" \
		--template='{{range .}}{{tablerow .repository.nameWithOwner .number .author.login .title .state (timeago .updatedAt)}}{{end}}')

	if [[ -n "$output" ]]; then
		local selected=$(echo $output | fzf -d ' ' \
			--exit-0 \
			--multi \
			--ansi \
			--expect="enter" \
			--header=$'Enter: Open in Browser' \
			--prompt="Search Pull Requests owned by (${owner}): ")

		local key="$(head -1 <<<"$selected")"
		case "$key" in
		enter)
			sed 1d <<<"$selected" | awk '{print $1,$2}' | xargs -I{} sh -c 'gh browse --repo {}'
			;;
		esac
	else
		echo "nothing found!"
	fi
}

# [ghsi] Search for open issues across all repositories owned by an owner
#
# Parameters:
# - OWNER: owner of the repositories to search in, defaults to "@me" if not provided
#
# Usage: ghsi [OWNER]
function ghsi {
	local owner="${1:-@me}"
	local output=$(gh search issues \
		--archived=false \
		--json="repository,number,author,title,state,updatedAt" \
		--limit 100 \
		--owner="${owner}" \
		--state="open" \
		--template='{{range .}}{{tablerow .repository.nameWithOwner .number .author.login .title .state (timeago .updatedAt)}}{{end}}')

	if [[ -n "$output" ]]; then
		local selected=$(echo $output | fzf -d ' ' \
			--multi \
			--ansi \
			--expect="enter" \
			--header=$'Enter: Open in Browser' \
			--prompt="Search Pull Requests owned by (${owner}): ")

		local key="$(head -1 <<<"$selected")"
		case "$key" in
		enter)
			sed 1d <<<"$selected" | awk '{print $1,$2}' | xargs -I{} sh -c 'gh browse --repo {}'
			;;
		esac
	else
		echo "nothing found!"
	fi
}

# [ghhelp] show this help message
function ghhelp() {
	echo "Usage of ghfzf aliases"
	echo
	echo "Collection of powerful aliases to speed up interactions with GitHub"
	echo "Find more information at https://github.com/cbrgm/ghfzf"
	echo
	echo "Usage:"
	if [ -n "$ZSH_VERSION" ]; then
		grep -E '^# \[.+\]' "${(%):-%x}"
	else
		grep -E '^# \[.+\]' "${BASH_SOURCE[0]}"
	fi
}
